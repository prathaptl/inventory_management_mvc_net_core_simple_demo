#pragma checksum "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0adc1d55f382929338c2b8bbac252ddaa330e707"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Inventory_UpdateStock), @"mvc.1.0.view", @"/Views/Inventory/UpdateStock.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Inventory/UpdateStock.cshtml", typeof(AspNetCore.Views_Inventory_UpdateStock))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\_ViewImports.cshtml"
using InventoryManagement.Web;

#line default
#line hidden
#line 2 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\_ViewImports.cshtml"
using InventoryManagement.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0adc1d55f382929338c2b8bbac252ddaa330e707", @"/Views/Inventory/UpdateStock.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c9551255ee82bbbbfa903353b772cecd6ea4c10", @"/Views/_ViewImports.cshtml")]
    public class Views_Inventory_UpdateStock : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ProductViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml"
  
    ViewBag.Path = new List<string>() { "Inventory - Update Stock" };

#line default
#line hidden
#line 5 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml"
 if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{

#line default
#line hidden
            BeginContext(157, 59, true);
            WriteLiteral("    <div class=\"alert alert-danger\" role=\"alert\">\r\n        ");
            EndContext();
            BeginContext(217, 20, false);
#line 8 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml"
   Write(ViewBag.ErrorMessage);

#line default
#line hidden
            EndContext();
            BeginContext(237, 14, true);
            WriteLiteral("\r\n    </div>\r\n");
            EndContext();
#line 10 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml"
}

#line default
#line hidden
            DefineSection("Head", async() => {
                BeginContext(268, 103, true);
                WriteLiteral("\r\n    <link href=\"https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css\" rel=\"stylesheet\">\r\n");
                EndContext();
            }
            );
            BeginContext(374, 1762, true);
            WriteLiteral(@"
<div class="""" id=""app"">
    <div class=""form-row"">
        <div class=""col-md-6"">
            <div class=""position-relative form-group"">
                <label class="""">Product</label>
                <v-select :options=""products"" label=""Name"" v-model=""selectedProduct"" v-on:change=""GetProductDetails()""></v-select>
            </div>
        </div>
    </div>
    <div class=""form-row"">
        <div class=""col-md-6"">
            <div class=""position-relative form-group"">
                <label class="""">Code</label>
                <input placeholder="""" type=""text"" class=""form-control"" v-model=""model.Code"" readonly>
            </div>
        </div>
        <div class=""col-md-6"">
            <div class=""position-relative form-group"">
                <label class="""">Name</label>
                <input placeholder="""" type=""text"" class=""form-control"" v-model=""model.Name"" readonly>
            </div>
        </div>
    </div>
    <div class=""form-row"">
        <div class=""col-md-6"">
      ");
            WriteLiteral(@"      <div class=""position-relative form-group"">
                <label class="""">Price</label>
                <input placeholder="""" type=""text"" class=""form-control"" v-model=""model.Price"" readonly>
            </div>
        </div>
        <div class=""col-md-6"">
            <div class=""position-relative form-group"">
                <label class="""">Current Qty</label>
                <input placeholder="""" type=""number"" class=""form-control"" v-model=""model.CurrentQty"">
            </div>
        </div>
    </div>
    <br>
    <div align=""right"">
        <a href=""/Product/Index"" class=""mt-2 btn btn-danger"">Cancel</a>
        <button class=""mt-2 btn btn-primary"" v-on:click=""save()"">Update</button>
    </div>
</div>
");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2153, 530, true);
                WriteLiteral(@"
    <script src=""https://unpkg.com/vue@2""></script>
    <script src=""https://unpkg.com/vue-select@2""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""https://unpkg.com/vue""></script>
    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@10""></script>

    <script>

        Vue.component('v-select', VueSelect.VueSelect);

        var app = new Vue({
            el: '#app',
            components: {

            },
            data: {
                model: ");
                EndContext();
                BeginContext(2684, 31, false);
#line 75 "C:\Users\Prathap\Downloads\InventoryManagementSystem\InventoryManagementSystem\Source Code\InventoryManagement.Web\Views\Inventory\UpdateStock.cshtml"
                  Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
                EndContext();
                BeginContext(2715, 2530, true);
                WriteLiteral(@",
                isSubmited: false,
                error: false,
                errorMessage: """",
                products: [],
                selectedProduct: null
            },
            created() {
            },
            mounted() {
                axios
                    .get(`${window.location.origin}/Inventory/GetProducts`)
                    .then(response => {
                        this.products = response.data;

                    });
            },
            methods: {

                save() {
                    debugger;

                    var jsonData = JSON.stringify(this.model);
                    var url = '/Product/Edit';
                    axios({
                        method: 'post',
                        dataType: 'json',
                        url: url,
                        async: false,
                        data: ""data="" + btoa(unescape(encodeURIComponent(jsonData))),
                    }).then(response => {
             ");
                WriteLiteral(@"           var res = response.data;
                        if (res.success) {

                            Swal.fire({
                                icon: 'success',
                                title: 'Sotock Updated Successfully',
                                showConfirmButton: true,
                            });

                            this.model = {};
                            this.selectedProduct = {};

                        }
                        else {

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: res.error,
                            });

                        }
                    }).catch(e => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Something went wrong (e)',
                            text: """",
                        });
                    }");
                WriteLiteral(@");
                },

                GetProductDetails() {
                    axios
                        .get(`${window.location.origin}/Inventory/GetProductById?Id=${this.selectedProduct.Id}`)
                        .then(response => {
                            this.model = response.data;
                        });
                }
            },

            computed: {

            },
            watch: {
            }
        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ProductViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
